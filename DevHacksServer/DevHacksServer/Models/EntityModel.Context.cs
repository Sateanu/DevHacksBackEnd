//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevHacksServer.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Foods> Foods { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Restaurants> Restaurants { get; set; }
        public virtual DbSet<Suborders> Suborders { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Clusters> Clusters { get; set; }
    
        public virtual ObjectResult<GetOrdersInArea_Result> GetOrdersInArea(Nullable<double> latitude, Nullable<double> longitude, Nullable<double> radius)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("radius", radius) :
                new ObjectParameter("radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrdersInArea_Result>("GetOrdersInArea", latitudeParameter, longitudeParameter, radiusParameter);
        }
    
        public virtual ObjectResult<GetClustersInArea_Result> GetClustersInArea(Nullable<double> latitude, Nullable<double> longitude, Nullable<double> radius)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("radius", radius) :
                new ObjectParameter("radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClustersInArea_Result>("GetClustersInArea", latitudeParameter, longitudeParameter, radiusParameter);
        }
    
        public virtual ObjectResult<Clusters> GetClustersInAreaEntity(Nullable<double> latitude, Nullable<double> longitude, Nullable<double> radius)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("radius", radius) :
                new ObjectParameter("radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clusters>("GetClustersInAreaEntity", latitudeParameter, longitudeParameter, radiusParameter);
        }
    
        public virtual ObjectResult<Clusters> GetClustersInAreaEntity(Nullable<double> latitude, Nullable<double> longitude, Nullable<double> radius, MergeOption mergeOption)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("radius", radius) :
                new ObjectParameter("radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clusters>("GetClustersInAreaEntity", mergeOption, latitudeParameter, longitudeParameter, radiusParameter);
        }
    
        public virtual ObjectResult<Orders> GetOrdersInAreaEntity(Nullable<double> latitude, Nullable<double> longitude, Nullable<double> radius)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("radius", radius) :
                new ObjectParameter("radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Orders>("GetOrdersInAreaEntity", latitudeParameter, longitudeParameter, radiusParameter);
        }
    
        public virtual ObjectResult<Orders> GetOrdersInAreaEntity(Nullable<double> latitude, Nullable<double> longitude, Nullable<double> radius, MergeOption mergeOption)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("radius", radius) :
                new ObjectParameter("radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Orders>("GetOrdersInAreaEntity", mergeOption, latitudeParameter, longitudeParameter, radiusParameter);
        }
    }
}
